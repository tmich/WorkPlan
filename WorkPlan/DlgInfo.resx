<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>